#!/bin/sh
#
# Configure script for 'ksh'
# Copyright (c) 2012-2019 Bertrand Janin <b@janin.com>
#
#

VERSION="6.3"


# Some shells have shitty echos
alias echo=/bin/echo


# Attempt tp guess the best CC.
if [ -z "$CC" ]; then
	if cc -v 1>/dev/null 2>/dev/null; then
		export CC=cc
	else
		export CC=gcc
	fi
fi


# generate_makefile() - Generate the main Makefile
# $1 - file to append at the end
generate_makefile() {
	echo "# Automagically generated by 'configure'"
	echo

	echo "CFLAGS+=$CFLAGS -std=c99 -pedantic"
	echo "CFLAGS+=-I."
	echo "CFLAGS+=-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual"
	echo "CFLAGS+=-Wstrict-prototypes -Wmissing-prototypes"
	echo "CFLAGS+=-Wmissing-declarations -Wnested-externs -Winline"
	echo "CFLAGS+=-DVERSION=\\\"$VERSION\\\" $X_CFLAGS"
	echo
	echo "LDFLAGS+=-lcurses"
	echo

	if [ "$DEBUG_MODE" = "Y" ]; then
		echo "CFLAGS+=-Wall -ggdb -O0"
	else
		echo "CFLAGS+=-Wall -O2"
	fi

	if [ -n "$X_OBJECTS" ]; then
		echo "EXTRA_OBJECTS=$X_OBJECTS"
	fi

	echo "CC?=$CC"
	echo "PREFIX?=$PREFIX"
	echo "MANDIR=$MANDIR"

	cat "$1"
}


# usage() - Spit out basic help
usage() {
	echo "usage: ./configure [-h] [-d] [platform]"
	echo
	echo "    -h   this help screen."
	echo "    -d   configure for debug mode (-ggdb -O1)"
	echo
	echo "By default, this script will attempt to detect your OS and will guess the most"
	echo "appropriate configuration. If it gets your system wrong, you can force it,"
	echo "here is the list of ''supported'' platforms:"
	echo
	echo "    bsd     - OpenBSD, FreeBSD, OS X, Darwin, ..."
	echo "    linux   - Linux"
	exit
}


# not_found() - Exit 'cause we're missing something
not_found() {
	message="$1"
	echo "not found"
	echo
	echo ERROR: $message
	exit 2
}

# test_compile() - ingest stdin and test compile it
#	$1 - what's being tested
#	$2 - what's added to X_OBJECTS
#	$3 - what's added to CFLAGS
test_compile() {
	name=$1
	x_object_addition=$2
	cflags_addition=$3

	echo -n "$name... "
	cat > test_compile.c
	if ! ${CC} test_compile.c -o /dev/null 1>/dev/null 2>/dev/null; then
		echo "not found (we'll use ours)"
		if [ -n "$2" ]; then
			X_OBJECTS="$X_OBJECTS $x_object_addition"
		fi
		if [ -n "$3" ]; then
			CFLAGS="$CFLAGS $cflags_addition"
		fi
	else
		echo yes
	fi
	rm -f test_compile*
}


# Command-line arguments
while true; do
	case "$1" in
		-h|--help)
			usage
			exit 2
			;;

		-d|--debug)
			echo "Debug mode... enabled"
			DEBUG_MODE="Y"
			shift
			;;

		--prefix=*)
			PREFIX="${1##--prefix=}"
			shift
			;;

		--mandir=*)
			MANDIR="${1##--mandir=}"
			shift
			;;

		# Skip all random long opts passed by packagers thinking this
		# is autoconf-compatible.
		--*)
			shift
			;;

		*)
			break
			;;
	esac
done


# Detect platform
echo -n "Target platform... "
OS=`uname`
if [ -n "$1" ]; then
	OS="$1"
fi
echo $OS


# Platform-specific configuration
case $OS in
	Linux|Unix|POSIX)
		X_CFLAGS="-D_GNU_SOURCE"
		MANDEST="share/man"
		;;

	*BSD)
		;;

	Darwin)
		MANDEST="share/man"
		;;

	*)
		echo
		echo "Sorry but '$OS' is currently unsupported, you can attemp 'bsd' or 'linux' as"
		echo "target and cross your fingers. In order to do that you just need to give either"
		echo "one as parameter to ./configure. You can get the official list of supported "
		echo "platform with ./configure -l"
		exit
esac


# Default paths
[ -z "$PREFIX" ]	&& PREFIX="/usr/local"
[ -z "$MANDEST" ]	&& MANDEST="man"
[ -z "$MANDIR" ]	&& MANDIR="${PREFIX}/${MANDEST}"


# Check for make
echo -n "make... "
cat <<EOF > fake_makefile
all:
	@echo found
EOF
if ! make -f fake_makefile 1>/dev/null 2>/dev/null; then
	not_found "Make not found (try to install make or gmake)"
fi
echo found
rm -f fake_makefile*


test_compile cc <<EOF
main() {
	printf("woot\n");
}
EOF

test_compile strlcpy strlcpy.o <<EOF
main() {
	char buf[32];
	strlcpy(buf, "woot", sizeof(buf));
}
EOF

test_compile strlcat strlcat.o <<EOF
main() {
	char buf[32];
	strlcat(buf, "woot", sizeof(buf));
}
EOF

test_compile strtonum strtonum.o <<EOF
main() {
	const char *errstr;
	int i = strtonum("42", 1, 64, &errstr);
}
EOF

test_compile pledge pledge.o <<EOF
main() {
	int i = pledge("", "");
}
EOF

test_compile setresgid setresgid.o <<EOF
main() {
	int i = setresgid(9999, 9999, 9999);
}
EOF

test_compile setresuid setresuid.o <<EOF
main() {
	int i = setresuid(9999, 9999, 9999);
}
EOF

test_compile stravis stravis.o -DHAS_NO_STRAVIS <<EOF
#include <vis.h>
main() {
	int i = stravis(NULL, NULL, 0);
}
EOF

test_compile reallocarray reallocarray.o <<EOF
#include <stdlib.h>
main() {
	char *c = reallocarray(NULL, 0, 0);
}
EOF

test_compile sys_siglist siglist.o <<EOF
#include <signal.h>
main() {
	char *c = sys_siglist[9];
}
EOF

test_compile sys_signame signame.o <<EOF
#include <signal.h>
main() {
	char *c = sys_signame[9];
}
EOF

test_compile unvis "vis.o unvis.o" <<EOF
#include <vis.h>
main() {
	char c[32];
	strunvis(c, "woot");
}
EOF

generate_makefile Makefile.src > Makefile
generate_makefile src/Makefile.src > src/Makefile

echo
echo "Configured for '$OS', run 'make' (or 'gmake') to compile."

